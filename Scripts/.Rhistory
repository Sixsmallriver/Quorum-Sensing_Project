did1 = set_did1(id, daughters)
)
print(unique(data.1$series))
data.1 <- data.1 %>% filter(series == 9)
t.snap = c(min(data.1$frames), floor(max(data.1$frames)/2), max(data.1$frames))
# ggplot(dplyr::filter(data.1, frames %in% t.snap)) +
#   geom_point(aes(x=new_x, y=new_y, color=fluo2, shape = edge)) + facet_grid(~frames)
ggplot(dplyr::filter(data.1, frames %in% t.snap)) +
geom_point(aes(x = new_x, y = new_y, color = as.factor(cluster), shape = edge)) +
facet_grid(~frames) +
labs(color = "Cluster") +
theme_minimal()
data.1 <- data.1 %>% filter(cluster == 84)
# data <- read.csv(params$file, sep = ',')
data <- read.csv('../Distance_Results/Results_rpsL_with_delta_results_clustered.csv', sep = ',')
data.1 <- data %>% group_by(cluster, id) %>% mutate(cid = set_cid(id, daughters),
did2 = set_did2(id, daughters),
did1 = set_did1(id, daughters)
)
data.1 <- data.1 %>% filter(series == 9)
t.snap = c(min(data.1$frames), floor(max(data.1$frames)/2), max(data.1$frames))
# ggplot(dplyr::filter(data.1, frames %in% t.snap)) +
#   geom_point(aes(x=new_x, y=new_y, color=fluo2, shape = edge)) + facet_grid(~frames)
ggplot(dplyr::filter(data.1, frames %in% t.snap)) +
geom_point(aes(x = new_x, y = new_y, color = as.factor(cluster), shape = edge)) +
facet_grid(~frames) +
labs(color = "Cluster") +
theme_minimal()
# data.1 <- data.1 %>% filter(cluster == 84)
print(unique(data.1$cluster))
data.1 <- data.1 %>% filter(series == 9)
t.snap = c(min(data.1$frames), floor(max(data.1$frames)/2), max(data.1$frames))
# ggplot(dplyr::filter(data.1, frames %in% t.snap)) +
#   geom_point(aes(x=new_x, y=new_y, color=fluo2, shape = edge)) + facet_grid(~frames)
ggplot(dplyr::filter(data.1, frames %in% t.snap)) +
geom_point(aes(x = new_x, y = new_y, color = as.factor(cluster), shape = edge)) +
facet_grid(~frames) +
labs(color = "Cluster") +
theme_minimal()
data.1 <- data.1 %>% filter(cluster == 31)
# data <- read.csv(params$file, sep = ',')
data <- read.csv('../Distance_Results/Results_rpsL_with_delta_results_clustered.csv', sep = ',')
data.1 <- data %>% group_by(cluster, id) %>% mutate(cid = set_cid(id, daughters),
did2 = set_did2(id, daughters),
did1 = set_did1(id, daughters)
)
data.1 <- data.1 %>% filter(cluster == 31)
t.snap = c(min(data.1$frames), floor(max(data.1$frames)/2), max(data.1$frames))
# ggplot(dplyr::filter(data.1, frames %in% t.snap)) +
#   geom_point(aes(x=new_x, y=new_y, color=fluo2, shape = edge)) + facet_grid(~frames)
ggplot(dplyr::filter(data.1, frames %in% t.snap)) +
geom_point(aes(x = new_x, y = new_y, color = as.factor(cluster), shape = edge)) +
facet_grid(~frames) +
labs(color = "Cluster") +
theme_minimal()
data.1 <- data.1 %>% filter(cluster == 31)
# data <- read.csv(params$file, sep = ',')
data <- read.csv('../Distance_Results/Results_rpsL_with_delta_results_clustered.csv', sep = ',')
data.1 <- data %>% group_by(cluster, id) %>% mutate(cid = set_cid(id, daughters),
did2 = set_did2(id, daughters),
did1 = set_did1(id, daughters)
)
data.1 <- data.1 %>% filter(series == 9)
t.snap = c(min(data.1$frames), floor(max(data.1$frames)/2), max(data.1$frames))
# ggplot(dplyr::filter(data.1, frames %in% t.snap)) +
#   geom_point(aes(x=new_x, y=new_y, color=fluo2, shape = edge)) + facet_grid(~frames)
ggplot(dplyr::filter(data.1, frames %in% t.snap)) +
geom_point(aes(x = new_x, y = new_y, color = as.factor(cluster), shape = edge)) +
facet_grid(~frames) +
labs(color = "Cluster") +
theme_minimal()
# data.1 <- data.1 %>% filter(cluster == 31)
data.1 <- data %>% filter(cluster == 31)
t.snap = c(min(data.1$frames), floor(max(data.1$frames)/2), max(data.1$frames))
# ggplot(dplyr::filter(data.1, frames %in% t.snap)) +
#   geom_point(aes(x=new_x, y=new_y, color=fluo2, shape = edge)) + facet_grid(~frames)
ggplot(dplyr::filter(data.1, frames %in% t.snap)) +
geom_point(aes(x = new_x, y = new_y, color = as.factor(cluster), shape = edge)) +
facet_grid(~frames) +
labs(color = "Cluster") +
theme_minimal()
data.1 <- data %>% filter(cluster == 33)
t.snap = c(min(data.1$frames), floor(max(data.1$frames)/2), max(data.1$frames))
# ggplot(dplyr::filter(data.1, frames %in% t.snap)) +
#   geom_point(aes(x=new_x, y=new_y, color=fluo2, shape = edge)) + facet_grid(~frames)
ggplot(dplyr::filter(data.1, frames %in% t.snap)) +
geom_point(aes(x = new_x, y = new_y, color = as.factor(cluster), shape = edge)) +
facet_grid(~frames) +
labs(color = "Cluster") +
theme_minimal()
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
library(ggtree)
library(ggpubr)
library(rstatix)
library(ppcor)
# create a cid for each cell
set_cid <- function(id, daugthers){
cdivs <- 0
divs <- rep(0, length(daugthers))
for (i in 1:length(daugthers)) {
if (!is.na(daugthers[i])){
cdivs = cdivs + 1
}
divs[i] <- cdivs
}
return(paste(id, divs, sep = '_'))
}
# Set the daughter id for the first daughter cell
set_did1 <- function(id, daugthers){
did <- NA
divs <- rep(NA, length(daugthers))
for (i in length(daugthers):1) {
divs[i] <- did
if (!is.na(daugthers[i])){
if (is.na(did)){
did <- sum(!is.na(daugthers))
} else {
did <- did - 1
}
rm(list=ls())
}
}
return(ifelse(is.na(divs), NA,paste(id, divs, sep = '_')))
}
# Set the daughter id for the second daughter cells
set_did2 <- function(id, daugthers){
did <- NA
dids <- rep(NA, length(daugthers))
for (i in length(daugthers):1) {
dids[i] <- did
if (!is.na(daugthers[i])){
did = daugthers[i]
}
}
return(ifelse(is.na(dids), NA,paste(dids, 0, sep = '_')))
}
rm(list = ls())
# knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
library(ggtree)
library(ggpubr)
library(rstatix)
library(ppcor)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
library(ggtree)
library(ggpubr)
library(rstatix)
library(ppcor)
# create a cid for each cell
set_cid <- function(id, daugthers){
cdivs <- 0
divs <- rep(0, length(daugthers))
for (i in 1:length(daugthers)) {
if (!is.na(daugthers[i])){
cdivs = cdivs + 1
}
divs[i] <- cdivs
}
return(paste(id, divs, sep = '_'))
}
# Set the daughter id for the first daughter cell
set_did1 <- function(id, daugthers){
did <- NA
divs <- rep(NA, length(daugthers))
for (i in length(daugthers):1) {
divs[i] <- did
if (!is.na(daugthers[i])){
if (is.na(did)){
did <- sum(!is.na(daugthers))
} else {
did <- did - 1
}
}
}
return(ifelse(is.na(divs), NA,paste(id, divs, sep = '_')))
}
# Set the daughter id for the second daughter cells
set_did2 <- function(id, daugthers){
did <- NA
dids <- rep(NA, length(daugthers))
for (i in length(daugthers):1) {
dids[i] <- did
if (!is.na(daugthers[i])){
did = daugthers[i]
}
}
return(ifelse(is.na(dids), NA,paste(dids, 0, sep = '_')))
}
# data <- read.csv(params$file, sep = ',')
data <- read.csv('../Distance_Results/LasR_without_delta_results_clustered_cleaned_distance.csv', sep = ',')
data.1 <- data %>% group_by(cluster, id) %>% mutate(cid = set_cid(id, daughters),
did2 = set_did2(id, daughters),
did1 = set_did1(id, daughters)
)
# Set the sister id
set_sid <- function(cid, did1, did2) {
sids <- rep(NA, length(cid))
# iterate every cid tp assign for sister id
for (i in 1:length(cid)) {
# check if cid is in did1
idx1 <- which(did1 == cid[i])
if (length(idx1) >= 1 && !is.na(did2[idx1[1]])) {
sids[i] <- did2[idx1[1]]
}
# chec if cid is in the did2
idx2 <- which(did2 == cid[i])
if (length(idx2) >= 1 && !is.na(did1[idx2[1]])) {
sids[i] <- did1[idx2[1]]
}
}
return(sids)
}
data.2 <- data.1 %>% group_by(cluster) %>% mutate(sid = set_sid(cid, did1, did2))
# Get all cell ids belonging to the same lineage
get_lin <- function(cid, df) {
if (is.na(cid)) {
return(NA)
}
did1 <- df[which(df$cid==cid), 'did1']$did1
did2 <- df[which(df$cid==cid), 'did2']$did2
# check if did1 and did2 are successfully taken
if (length(did1) == 0 | length(did2) == 0) {
print(paste("Error: cid =", cid, "did1 =", did1, "did2 =", did2))
return(NA)
}
if (length(did1) > 1 || length(did2) > 1) {
stop(paste("Error: Multiple values found for cid =", cid))
}
no.did <- is.na(did1) & is.na(did2)
if (no.did){
return(cid)
} else {
return(c(cid, get_lin(did1, df), get_lin(did2, df)))
}
}
# Initialize an empty data frame to accumulate the results
final_data <- data.frame()
# Loop through each unique series
for (i in unique(data.2$series)) {
# Filter the data for the current series
data.subset <- data.2 %>% filter(series == i)
# Calculate the mean, first frame, and lifespan for each cell
data.mean <- data.subset %>% group_by(cid, did1, did2) %>%
summarise(cell.mean = mean(fluo2),
first.frame = min(frames),
lifespan = length(frames),
.groups = 'drop')
# Get all cid present in the first frame to define the lineages growing from them
root_cids <- data.mean %>% filter(first.frame == 0) %>% dplyr::select(cid) %>% pull()
# Initialize the lineage column in data.mean
data.mean$lineage <- NA
# # Assign lineages
# for (lid in root_cids) {
#   lin_ids <- get_lin(lid, data.mean)
#   data.mean[which(data.mean$cid %in% lin_ids), "lineage"] <- lid
# }
# Assign lineages
for (lid in root_cids) {
tryCatch({
lin_ids <- get_lin(lid, data.mean)
data.mean[which(data.mean$cid %in% lin_ids), "lineage"] <- lid
}, error = function(e) {
# 捕获错误并打印信息
print(paste("Error with get_lin for cid =", lid, ", series =", i))
print(e) # 打印错误信息
})
}
# Join the lineage information back into the subset of the original data
updated_subset <- data.subset %>% left_join(data.mean %>% dplyr::select(cid, lineage), by = 'cid')
# Append the updated subset to the final_data
final_data <- bind_rows(final_data, updated_subset)
}
# Initialize an empty data frame to accumulate the results
final_data <- data.frame()
# Loop through each unique series
for (i in unique(data.2$series)) {
# Filter the data for the current series
data.subset <- data.2 %>% filter(series == i)
# Calculate the mean, first frame, and lifespan for each cell
data.mean <- data.subset %>% group_by(cid, did1, did2) %>%
summarise(cell.mean = mean(fluo2),
first.frame = min(frames),
lifespan = length(frames),
.groups = 'drop')
# Get all cid present in the first frame to define the lineages growing from them
root_cids <- data.mean %>% filter(first.frame == 0) %>% dplyr::select(cid) %>% pull()
# Initialize the lineage column in data.mean
data.mean$lineage <- NA
# # Assign lineages
# for (lid in root_cids) {
#   lin_ids <- get_lin(lid, data.mean)
#   data.mean[which(data.mean$cid %in% lin_ids), "lineage"] <- lid
# }
# Assign lineages
for (lid in root_cids) {
tryCatch({
lin_ids <- get_lin(lid, data.mean)
data.mean[which(data.mean$cid %in% lin_ids), "lineage"] <- lid
}, error = function(e) {
# 捕获错误并打印信息
print(paste("Error with get_lin for cid =", lid, ", series =", i))
print(e) # 打印错误信息
print(i)
})
}
# Join the lineage information back into the subset of the original data
updated_subset <- data.subset %>% left_join(data.mean %>% dplyr::select(cid, lineage), by = 'cid')
# Append the updated subset to the final_data
final_data <- bind_rows(final_data, updated_subset)
}
# Initialize an empty data frame to accumulate the results
final_data <- data.frame()
# Loop through each unique series
for (i in unique(data.2$series)) {
print(i)
# Filter the data for the current series
data.subset <- data.2 %>% filter(series == i)
# Calculate the mean, first frame, and lifespan for each cell
data.mean <- data.subset %>% group_by(cid, did1, did2) %>%
summarise(cell.mean = mean(fluo2),
first.frame = min(frames),
lifespan = length(frames),
.groups = 'drop')
# Get all cid present in the first frame to define the lineages growing from them
root_cids <- data.mean %>% filter(first.frame == 0) %>% dplyr::select(cid) %>% pull()
# Initialize the lineage column in data.mean
data.mean$lineage <- NA
# # Assign lineages
# for (lid in root_cids) {
#   lin_ids <- get_lin(lid, data.mean)
#   data.mean[which(data.mean$cid %in% lin_ids), "lineage"] <- lid
# }
# Assign lineages
for (lid in root_cids) {
tryCatch({
lin_ids <- get_lin(lid, data.mean)
data.mean[which(data.mean$cid %in% lin_ids), "lineage"] <- lid
}, error = function(e) {
# 捕获错误并打印信息
print(paste("Error with get_lin for cid =", lid, ", series =", i))
print(e) # 打印错误信息
})
}
# Join the lineage information back into the subset of the original data
updated_subset <- data.subset %>% left_join(data.mean %>% dplyr::select(cid, lineage), by = 'cid')
# Append the updated subset to the final_data
final_data <- bind_rows(final_data, updated_subset)
}
View(data.2)
# Initialize an empty data frame to accumulate the results
final_data <- data.frame()
# Loop through each unique series
for (i in unique(data.2$series)) {
print(i)
# Filter the data for the current series
data.subset <- data.2 %>% filter(series == i)
# Calculate the mean, first frame, and lifespan for each cell
data.mean <- data.subset %>% group_by(cid, did1, did2) %>%
summarise(cell.mean = mean(fluo2),
first.frame = min(frames),
lifespan = length(frames),
.groups = 'drop')
# Get all cid present in the first frame to define the lineages growing from them
root_cids <- data.mean %>% filter(first.frame == 0) %>% dplyr::select(cid) %>% pull()
# Initialize the lineage column in data.mean
data.mean$lineage <- NA
# # Assign lineages
# for (lid in root_cids) {
#   lin_ids <- get_lin(lid, data.mean)
#   data.mean[which(data.mean$cid %in% lin_ids), "lineage"] <- lid
# }
# Assign lineages
for (lid in root_cids) {
tryCatch({
lin_ids <- get_lin(lid, data.mean, i)
data.mean[which(data.mean$cid %in% lin_ids), "lineage"] <- lid
}, error = function(e) {
# 捕获错误并打印信息
print(paste("Error with get_lin for cid =", lid, ", series =", i))
print(e) # 打印错误信息
})
}
# Join the lineage information back into the subset of the original data
updated_subset <- data.subset %>% left_join(data.mean %>% dplyr::select(cid, lineage), by = 'cid')
# Append the updated subset to the final_data
final_data <- bind_rows(final_data, updated_subset)
}
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
library(ggtree)
library(ggpubr)
library(rstatix)
library(ppcor)
# create a cid for each cell
set_cid <- function(id, daugthers){
cdivs <- 0
divs <- rep(0, length(daugthers))
for (i in 1:length(daugthers)) {
if (!is.na(daugthers[i])){
cdivs = cdivs + 1
}
divs[i] <- cdivs
}
return(paste(id, divs, sep = '_'))
}
# Set the daughter id for the first daughter cell
set_did1 <- function(id, daugthers){
did <- NA
divs <- rep(NA, length(daugthers))
for (i in length(daugthers):1) {
divs[i] <- did
if (!is.na(daugthers[i])){
if (is.na(did)){
did <- sum(!is.na(daugthers))
} else {
did <- did - 1
}
}
}
return(ifelse(is.na(divs), NA,paste(id, divs, sep = '_')))
}
# Set the daughter id for the second daughter cells
set_did2 <- function(id, daugthers){
did <- NA
dids <- rep(NA, length(daugthers))
for (i in length(daugthers):1) {
dids[i] <- did
if (!is.na(daugthers[i])){
did = daugthers[i]
}
}
return(ifelse(is.na(dids), NA,paste(dids, 0, sep = '_')))
}
# data <- read.csv(params$file, sep = ',')
data <- read.csv('../Distance_Results/Cluster_Results_rhlI_without_clustered.csv', sep = ',')
data.1 <- data %>% group_by(cluster, id) %>% mutate(cid = set_cid(id, daughters),
did2 = set_did2(id, daughters),
did1 = set_did1(id, daughters)
)
# Set the sister id
set_sid <- function(cid, did1, did2) {
sids <- rep(NA, length(cid))
# iterate every cid tp assign for sister id
for (i in 1:length(cid)) {
# check if cid is in did1
idx1 <- which(did1 == cid[i])
if (length(idx1) >= 1 && !is.na(did2[idx1[1]])) {
sids[i] <- did2[idx1[1]]
}
# chec if cid is in the did2
idx2 <- which(did2 == cid[i])
if (length(idx2) >= 1 && !is.na(did1[idx2[1]])) {
sids[i] <- did1[idx2[1]]
}
}
return(sids)
}
data.2 <- data.1 %>% group_by(cluster) %>% mutate(sid = set_sid(cid, did1, did2))
# Get all cell ids belonging to the same lineage
get_lin <- function(cid, df) {
if (is.na(cid)) {
return(NA)
}
did1 <- df[which(df$cid==cid), 'did1']$did1
did2 <- df[which(df$cid==cid), 'did2']$did2
# check if did1 and did2 are successfully taken
if (length(did1) == 0 | length(did2) == 0) {
print(paste("Error: cid =", cid, "did1 =", did1, "did2 =", did2))
return(NA)
}
no.did <- is.na(did1) & is.na(did2)
if (no.did){
return(cid)
} else {
return(c(cid, get_lin(did1, df), get_lin(did2, df)))
}
}
# Initialize an empty data frame to accumulate the results
final_data <- data.frame()
# Loop through each unique series
for (i in unique(data.2$series)) {
# Filter the data for the current series
data.subset <- data.2 %>% filter(series == i)
# Calculate the mean, first frame, and lifespan for each cell
data.mean <- data.subset %>% group_by(cid, did1, did2) %>%
summarise(cell.mean = mean(fluo2),
first.frame = min(frames),
lifespan = length(frames),
.groups = 'drop')
# Get all cid present in the first frame to define the lineages growing from them
root_cids <- data.mean %>% filter(first.frame == 0) %>% dplyr::select(cid) %>% pull()
# Initialize the lineage column in data.mean
data.mean$lineage <- NA
# Assign lineages
for (lid in root_cids) {
lin_ids <- get_lin(lid, data.mean)
data.mean[which(data.mean$cid %in% lin_ids), "lineage"] <- lid
}
# Join the lineage information back into the subset of the original data
updated_subset <- data.subset %>% left_join(data.mean %>% dplyr::select(cid, lineage), by = 'cid')
# Append the updated subset to the final_data
final_data <- bind_rows(final_data, updated_subset)
}
View(final_data)
write.csv(final_data, 'df_rhlI_withLineage_forHotspot.csv')
